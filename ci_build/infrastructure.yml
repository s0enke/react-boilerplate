---
AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  GithubOauthToken:
    Type: String
Resources:
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      AccessControl: BucketOwnerFullControl
  CfnUpdateFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  BuildFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSCodePipelineCustomActionAccess
  DeployFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSCodePipelineCustomActionAccess
      Policies:
        - PolicyName: WriteAccessToDeployBucket
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  Fn::Join:
                    - ""
                    - - "arn:aws:s3:::"
                      - Ref: WebsiteBucket
                      - ":*"
  PipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: react-boilerplate-ci
      RoleArn:
        Fn::GetAtt:
          - PipelineRole
          - Arn
      ArtifactStore:
        Location:
          Ref:
            ArtifactStoreBucket
        Type: S3
      Stages:
        - Name: source
          Actions:
            - InputArtifacts: []
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: s0enke
                Repo: react-boilerplate
                Branch: master
                OAuthToken:
                  Ref: GithubOauthToken
              RunOrder: 1
        - Name: self_update
          Actions:
            - InputArtifacts:
                - Name: SourceOutput
              Name: Lambda
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              OutputArtifacts: []
              Configuration:
                FunctionName:
                  Ref: CfnUpdateFunction
              RunOrder: 2
        - Name: build
          Actions:
            - InputArtifacts:
                - Name: SourceOutput
              Name: Lambda
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              OutputArtifacts:
                - Name: Build
              Configuration:
                FunctionName:
                  Ref: BuildFunction
              RunOrder: 2
        - Name: deploy
          Actions:
            - InputArtifacts:
                - Name: SourceOutput
              Name: Lambda
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              InputArtifacts:
                - Name: Build
              Configuration:
                FunctionName:
                  Ref: DeployFunctionRole
              RunOrder: 3
  BuildFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          var child_process = require('child_process');
          var fs = require('fs');
          var AWS = require('aws-sdk');
          var util = require('util');

          exports.handler = function(event, context) {
            console.log(util.inspect(event, {depth: null}));
            var job = event['CodePipeline.job'];
            var jobId = job.id;

            var inputArtifactConfig = job.data.inputArtifacts[0];
            var outputArtifactConfig = job.data.outputArtifacts[0];
            console.log(util.inspect(outputArtifactConfig, {depth: null}));

            process.env.HOME = '/tmp';
            console.log(child_process.execSync('rm -fr /tmp/lambda_function /tmp/.npm /tmp/bin', {encoding: 'utf-8'}));
            fs.mkdirSync('/tmp/lambda_function');
            process.chdir('/tmp/lambda_function');


            // install newer version of node
            console.log(child_process.execSync('node /usr/local/lib64/node-v4.3.x/lib/node_modules/npm/bin/npm-cli.js install npm --prefix=/tmp --progress=false', {encoding: 'utf-8'}));

            console.log(child_process.execSync('find /tmp/ -name npm -type f', {encoding: 'utf-8'}));
            fs.mkdirSync('/tmp/bin');
            fs.symlinkSync('/tmp/node_modules/npm/bin/npm-cli.js', '/tmp/bin/npm');
            process.env.PATH = '/tmp/bin:' + process.env.PATH;


            console.log(child_process.execSync('npm --version', {encoding: 'utf-8'}));
            //return;

            var params = {
              Bucket: inputArtifactConfig.location.s3Location.bucketName,
              Key: inputArtifactConfig.location.s3Location.objectKey
            };
            var file = fs.createWriteStream("/tmp/lambda_function/artifact.zip");

            var artifactCredentials = job.data.artifactCredentials;
            var s3 = new AWS.S3({
              "signatureVersion":"v4",
              "accessKeyId": artifactCredentials.accessKeyId,
              "secretAccessKey": artifactCredentials.secretAccessKey,
              "sessionToken": artifactCredentials.sessionToken
            });

            s3.getObject(params).createReadStream().pipe(file);
            file.on('close', function(){
              console.log(child_process.execSync('unzip artifact.zip', {encoding: 'utf-8'}));
              console.log(child_process.execSync('npm install', {encoding: 'utf-8'}));
              console.log(child_process.execSync('npm run build', {encoding: 'utf-8'}));
              console.log(child_process.execSync('tar vcfz build.tgz build/', {encoding: 'utf-8'}));

              var uploadParams = {
                Bucket: outputArtifactConfig.location.s3Location.bucketName,
                Key: outputArtifactConfig.location.s3Location.objectKey,
                Body: fs.createReadStream('build.tgz'),
                ServerSideEncryption: "aws:kms"
              };

              s3.putObject(
                uploadParams,
                function(err, data) {
                  if(err) {
                      context.fail(err);
                  } else {
                    var codepipeline = new AWS.CodePipeline();
                    codepipeline.putJobSuccessResult({ jobId: jobId }, function(err, data) {
                      if(err) {
                          context.fail(err);
                      } else {
                          context.succeed();
                      }
                    });
                  }
                }
              );
            });
          };
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - BuildFunctionRole
          - Arn
      Runtime: nodejs4.3
      Timeout: 300
      MemorySize: 1536
  DeployFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          from boto3.session import Session
          import botocore
          import tempfile
          import zipfile
          import json

          code_pipeline = boto3.client('codepipeline')
          cf = boto3.client('cloudformation')

          def handler(event, context):

            job = event['CodePipeline.job'];
            job_data = job['data']
            job_id = job['id']
            artifact = job_data['inputArtifacts'][0];

            key_id = job_data['artifactCredentials']['accessKeyId']
            key_secret = job_data['artifactCredentials']['secretAccessKey']
            session_token = job_data['artifactCredentials']['sessionToken']

            # download artifact
            session = Session(aws_access_key_id=key_id,
            aws_secret_access_key=key_secret,
            aws_session_token=session_token)
            s3 = session.client('s3', config=botocore.client.Config(signature_version='s3v4'))

            tmp_file = tempfile.NamedTemporaryFile()
            bucket = artifact['location']['s3Location']['bucketName']
            key = artifact['location']['s3Location']['objectKey']

            # extract zip
            with tempfile.NamedTemporaryFile() as tmp_file:
              s3.download_file(bucket, key, tmp_file.name)
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - DeployFunctionRole
          - Arn
      Runtime: python2.7
      Timeout: 300
  CfnUpdateFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          from boto3.session import Session
          import botocore
          import tempfile
          import zipfile
          import json

          code_pipeline = boto3.client('codepipeline')
          cf = boto3.client('cloudformation')

          def handler(event, context):

            job = event['CodePipeline.job'];
            job_data = job['data']
            job_id = job['id']
            artifact = job_data['inputArtifacts'][0];

            key_id = job_data['artifactCredentials']['accessKeyId']
            key_secret = job_data['artifactCredentials']['secretAccessKey']
            session_token = job_data['artifactCredentials']['sessionToken']

            stack_name = 'react-boilerplate-ci-infrastructure'
            file_in_zip = 'ci_build/infrastructure.json'
            file_in_zip_yaml = 'ci_build/infrastructure.yml'
            cfn_yaml_file = '/tmp/infrastructure.json'

            # download artifact
            session = Session(aws_access_key_id=key_id,
            aws_secret_access_key=key_secret,
            aws_session_token=session_token)
            s3 = session.client('s3', config=botocore.client.Config(signature_version='s3v4'))

            tmp_file = tempfile.NamedTemporaryFile()
            bucket = artifact['location']['s3Location']['bucketName']
            key = artifact['location']['s3Location']['objectKey']

            # extract zip
            with tempfile.NamedTemporaryFile() as tmp_file:
              s3.download_file(bucket, key, tmp_file.name)
              with zipfile.ZipFile(tmp_file.name, 'r') as zip:
                cfn_template_json = zip.read(file_in_zip)
                cfn_template_yaml = zip.read(file_in_zip_yaml)

            text_file = open(cfn_yaml_file, "w")
            text_file.write(cfn_template_yaml)
            text_file.close()

            # apply CFN
            try:
              cf.update_stack(
                StackName=stack_name,
                TemplateBody=cfn_template_json,
                Parameters=[
                  {
                    'ParameterKey': 'GithubOauthToken',
                    'UsePreviousValue': True,
                  },
                ],
                Capabilities=[
                  'CAPABILITY_IAM',
                ]
              )
            except botocore.exceptions.ClientError as e:
              if not "No updates are to be performed." in e.response['Error']['Message']:
                raise e

            code_pipeline.put_job_success_result(jobId=job_id)
            import subprocess
            print(subprocess.call("find /usr -name ruby", shell=True))
            print(subprocess.call("ruby -ryaml -rjson -e 'puts JSON.pretty_generate(YAML.load(ARGF))' < %s" % cfn_yaml_file, shell=True))
      Handler: index.handler
      Role:
        Fn::GetAtt:
          - CfnUpdateFunctionRole
          - Arn
      Runtime: python2.7
      Timeout: 300
