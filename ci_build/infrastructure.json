{
    "AWSTemplateFormatVersion": "2010-09-09", 
    "Parameters": {
        "GithubOauthToken": {
            "Type": "String"
        }
    }, 
    "Resources": {
        "WebsiteBucket": {
            "Type": "AWS::S3::Bucket", 
            "Properties": {
                "AccessControl": "PublicRead", 
                "WebsiteConfiguration": {
                    "IndexDocument": "index.html"
                }
            }
        }, 
        "Pipeline": {
            "Type": "AWS::CodePipeline::Pipeline", 
            "Properties": {
                "RoleArn": {
                    "Fn::GetAtt": [
                        "PipelineRole", 
                        "Arn"
                    ]
                }, 
                "Stages": [
                    {
                        "Name": "source", 
                        "Actions": [
                            {
                                "ActionTypeId": {
                                    "Category": "Source", 
                                    "Owner": "ThirdParty", 
                                    "Version": 1, 
                                    "Provider": "GitHub"
                                }, 
                                "InputArtifacts": [], 
                                "RunOrder": 1, 
                                "OutputArtifacts": [
                                    {
                                        "Name": "SourceOutput"
                                    }
                                ], 
                                "Configuration": {
                                    "Owner": "s0enke", 
                                    "Repo": "react-boilerplate", 
                                    "Branch": "master", 
                                    "OAuthToken": {
                                        "Ref": "GithubOauthToken"
                                    }
                                }, 
                                "Name": "Source"
                            }
                        ]
                    }, 
                    {
                        "Name": "self_update", 
                        "Actions": [
                            {
                                "ActionTypeId": {
                                    "Category": "Invoke", 
                                    "Owner": "AWS", 
                                    "Version": 1, 
                                    "Provider": "Lambda"
                                }, 
                                "InputArtifacts": [
                                    {
                                        "Name": "SourceOutput"
                                    }
                                ], 
                                "RunOrder": 2, 
                                "OutputArtifacts": [], 
                                "Configuration": {
                                    "FunctionName": {
                                        "Ref": "CfnUpdateFunction"
                                    }
                                }, 
                                "Name": "Lambda"
                            }
                        ]
                    }, 
                    {
                        "Name": "build", 
                        "Actions": [
                            {
                                "ActionTypeId": {
                                    "Category": "Invoke", 
                                    "Owner": "AWS", 
                                    "Version": 1, 
                                    "Provider": "Lambda"
                                }, 
                                "InputArtifacts": [
                                    {
                                        "Name": "SourceOutput"
                                    }
                                ], 
                                "RunOrder": 2, 
                                "OutputArtifacts": [
                                    {
                                        "Name": "Build"
                                    }
                                ], 
                                "Configuration": {
                                    "FunctionName": {
                                        "Ref": "BuildFunction"
                                    }
                                }, 
                                "Name": "Lambda"
                            }
                        ]
                    }
                ], 
                "ArtifactStore": {
                    "Type": "S3", 
                    "Location": {
                        "Ref": "ArtifactStoreBucket"
                    }
                }, 
                "Name": "react-boilerplate-ci"
            }
        }, 
        "CfnUpdateFunctionRole": {
            "Type": "AWS::IAM::Role", 
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AdministratorAccess"
                ], 
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17", 
                    "Statement": {
                        "Action": "sts:AssumeRole", 
                        "Effect": "Allow", 
                        "Principal": {
                            "Service": "lambda.amazonaws.com"
                        }
                    }
                }
            }
        }, 
        "PipelineRole": {
            "Type": "AWS::IAM::Role", 
            "Properties": {
                "Path": "/", 
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AdministratorAccess"
                ], 
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17", 
                    "Statement": {
                        "Action": "sts:AssumeRole", 
                        "Effect": "Allow", 
                        "Principal": {
                            "Service": "codepipeline.amazonaws.com"
                        }
                    }
                }
            }
        }, 
        "DeployFunctionRole": {
            "Type": "AWS::IAM::Role", 
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole", 
                    "arn:aws:iam::aws:policy/AWSCodePipelineCustomActionAccess"
                ], 
                "Policies": [
                    {
                        "PolicyName": "WriteAccessToDeployBucket", 
                        "PolicyDocument": {
                            "Version": "2012-10-17", 
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:PutObject"
                                    ], 
                                    "Resource": {
                                        "Fn::Join": [
                                            "", 
                                            [
                                                "arn:aws:s3:::", 
                                                {
                                                    "Ref": "WebsiteBucket"
                                                }, 
                                                ":*"
                                            ]
                                        ]
                                    }, 
                                    "Effect": "Allow"
                                }
                            ]
                        }
                    }
                ], 
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17", 
                    "Statement": {
                        "Action": "sts:AssumeRole", 
                        "Effect": "Allow", 
                        "Principal": {
                            "Service": "lambda.amazonaws.com"
                        }
                    }
                }
            }
        }, 
        "ArtifactStoreBucket": {
            "Type": "AWS::S3::Bucket", 
            "Properties": {
                "AccessControl": "BucketOwnerFullControl", 
                "VersioningConfiguration": {
                    "Status": "Enabled"
                }
            }
        }, 
        "CfnUpdateFunction": {
            "Type": "AWS::Lambda::Function", 
            "Properties": {
                "Code": {
                    "ZipFile": "import boto3\nfrom boto3.session import Session\nimport botocore\nimport tempfile\nimport zipfile\nimport json\n\ncode_pipeline = boto3.client('codepipeline')\ncf = boto3.client('cloudformation')\n\ndef handler(event, context):\n\n  job = event['CodePipeline.job'];\n  job_data = job['data']\n  job_id = job['id']\n  artifact = job_data['inputArtifacts'][0];\n\n  key_id = job_data['artifactCredentials']['accessKeyId']\n  key_secret = job_data['artifactCredentials']['secretAccessKey']\n  session_token = job_data['artifactCredentials']['sessionToken']\n\n  stack_name = 'react-boilerplate-ci-infrastructure'\n  file_in_zip = 'ci_build/infrastructure.json'\n  file_in_zip_yaml = 'ci_build/infrastructure.yml'\n  cfn_yaml_file = '/tmp/infrastructure.json'\n\n  # download artifact\n  session = Session(aws_access_key_id=key_id,\n  aws_secret_access_key=key_secret,\n  aws_session_token=session_token)\n  s3 = session.client('s3', config=botocore.client.Config(signature_version='s3v4'))\n\n  tmp_file = tempfile.NamedTemporaryFile()\n  bucket = artifact['location']['s3Location']['bucketName']\n  key = artifact['location']['s3Location']['objectKey']\n\n  # extract zip\n  with tempfile.NamedTemporaryFile() as tmp_file:\n    s3.download_file(bucket, key, tmp_file.name)\n    with zipfile.ZipFile(tmp_file.name, 'r') as zip:\n      cfn_template_json = zip.read(file_in_zip)\n      cfn_template_yaml = zip.read(file_in_zip_yaml)\n\n  text_file = open(cfn_yaml_file, \"w\")\n  text_file.write(cfn_template_yaml)\n  text_file.close()\n\n  # apply CFN\n  try:\n    cf.update_stack(\n      StackName=stack_name,\n      TemplateBody=cfn_template_json,\n      Parameters=[\n        {\n          'ParameterKey': 'GithubOauthToken',\n          'UsePreviousValue': True,\n        },\n      ],\n      Capabilities=[\n        'CAPABILITY_IAM',\n      ]\n    )\n  except botocore.exceptions.ClientError as e:\n    if not \"No updates are to be performed.\" in e.response['Error']['Message']:\n      raise e\n\n  code_pipeline.put_job_success_result(jobId=job_id)\n  import subprocess\n  print(subprocess.call(\"find /usr -name ruby\", shell=True))\n  print(subprocess.call(\"ruby -ryaml -rjson -e 'puts JSON.pretty_generate(YAML.load(ARGF))' < %s\" % cfn_yaml_file, shell=True))\n"
                }, 
                "Runtime": "python2.7", 
                "Handler": "index.handler", 
                "Role": {
                    "Fn::GetAtt": [
                        "CfnUpdateFunctionRole", 
                        "Arn"
                    ]
                }, 
                "Timeout": 300
            }
        }, 
        "BuildFunction": {
            "Type": "AWS::Lambda::Function", 
            "Properties": {
                "Code": {
                    "ZipFile": "var child_process = require('child_process');\nvar fs = require('fs');\nvar AWS = require('aws-sdk');\nvar util = require('util');\n\nexports.handler = function(event, context) {\n  console.log(util.inspect(event, {depth: null}));\n  var job = event['CodePipeline.job'];\n  var jobId = job.id;\n\n  var inputArtifactConfig = job.data.inputArtifacts[0];\n  var outputArtifactConfig = job.data.outputArtifacts[0];\n  console.log(util.inspect(outputArtifactConfig, {depth: null}));\n\n  process.env.HOME = '/tmp';\n  console.log(child_process.execSync('rm -fr /tmp/lambda_function /tmp/.npm /tmp/bin', {encoding: 'utf-8'}));\n  fs.mkdirSync('/tmp/lambda_function');\n  process.chdir('/tmp/lambda_function');\n\n\n  // install newer version of node\n  console.log(child_process.execSync('node /usr/local/lib64/node-v4.3.x/lib/node_modules/npm/bin/npm-cli.js install npm --prefix=/tmp --progress=false', {encoding: 'utf-8'}));\n\n  console.log(child_process.execSync('find /tmp/ -name npm -type f', {encoding: 'utf-8'}));\n  fs.mkdirSync('/tmp/bin');\n  fs.symlinkSync('/tmp/node_modules/npm/bin/npm-cli.js', '/tmp/bin/npm');\n  process.env.PATH = '/tmp/bin:' + process.env.PATH;\n\n\n  console.log(child_process.execSync('npm --version', {encoding: 'utf-8'}));\n  //return;\n\n  var params = {\n    Bucket: inputArtifactConfig.location.s3Location.bucketName,\n    Key: inputArtifactConfig.location.s3Location.objectKey\n  };\n  var file = fs.createWriteStream(\"/tmp/lambda_function/artifact.zip\");\n\n  var artifactCredentials = job.data.artifactCredentials;\n  var s3 = new AWS.S3({\n    \"signatureVersion\":\"v4\",\n    \"accessKeyId\": artifactCredentials.accessKeyId,\n    \"secretAccessKey\": artifactCredentials.secretAccessKey,\n    \"sessionToken\": artifactCredentials.sessionToken\n  });\n\n  s3.getObject(params).createReadStream().pipe(file);\n  file.on('close', function(){\n    console.log(child_process.execSync('unzip artifact.zip', {encoding: 'utf-8'}));\n    console.log(child_process.execSync('npm install', {encoding: 'utf-8'}));\n    console.log(child_process.execSync('npm run build', {encoding: 'utf-8'}));\n    console.log(child_process.execSync('tar vcfz build.tgz build/', {encoding: 'utf-8'}));\n\n    var uploadParams = {\n      Bucket: outputArtifactConfig.location.s3Location.bucketName,\n      Key: outputArtifactConfig.location.s3Location.objectKey,\n      Body: fs.createReadStream('build.tgz'),\n      ServerSideEncryption: \"aws:kms\"\n    };\n\n    s3.putObject(\n      uploadParams,\n      function(err, data) {\n        if(err) {\n            context.fail(err);\n        } else {\n          var codepipeline = new AWS.CodePipeline();\n          codepipeline.putJobSuccessResult({ jobId: jobId }, function(err, data) {\n            if(err) {\n                context.fail(err);\n            } else {\n                context.succeed();\n            }\n          });\n        }\n      }\n    );\n  });\n};\n"
                }, 
                "Role": {
                    "Fn::GetAtt": [
                        "BuildFunctionRole", 
                        "Arn"
                    ]
                }, 
                "Timeout": 300, 
                "Handler": "index.handler", 
                "Runtime": "nodejs4.3", 
                "MemorySize": 1536
            }
        }, 
        "BuildFunctionRole": {
            "Type": "AWS::IAM::Role", 
            "Properties": {
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole", 
                    "arn:aws:iam::aws:policy/AWSCodePipelineCustomActionAccess"
                ], 
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17", 
                    "Statement": {
                        "Action": "sts:AssumeRole", 
                        "Effect": "Allow", 
                        "Principal": {
                            "Service": "lambda.amazonaws.com"
                        }
                    }
                }
            }
        }, 
        "DeployFunction": {
            "Type": "AWS::Lambda::Function", 
            "Properties": {
                "Code": {
                    "ZipFile": "import boto3\nfrom boto3.session import Session\nimport botocore\nimport tempfile\nimport zipfile\nimport json\n\ncode_pipeline = boto3.client('codepipeline')\ncf = boto3.client('cloudformation')\n\ndef handler(event, context):\n\n  job = event['CodePipeline.job'];\n  job_data = job['data']\n  job_id = job['id']\n  artifact = job_data['inputArtifacts'][0];\n\n  key_id = job_data['artifactCredentials']['accessKeyId']\n  key_secret = job_data['artifactCredentials']['secretAccessKey']\n  session_token = job_data['artifactCredentials']['sessionToken']\n\n  # download artifact\n  session = Session(aws_access_key_id=key_id,\n  aws_secret_access_key=key_secret,\n  aws_session_token=session_token)\n  s3 = session.client('s3', config=botocore.client.Config(signature_version='s3v4'))\n\n  tmp_file = tempfile.NamedTemporaryFile()\n  bucket = artifact['location']['s3Location']['bucketName']\n  key = artifact['location']['s3Location']['objectKey']\n\n  # extract zip\n  with tempfile.NamedTemporaryFile() as tmp_file:\n    s3.download_file(bucket, key, tmp_file.name)\n"
                }, 
                "Runtime": "python2.7", 
                "Handler": "index.handler", 
                "Role": {
                    "Fn::GetAtt": [
                        "DeployFunctionRole", 
                        "Arn"
                    ]
                }, 
                "Timeout": 300
            }
        }
    }
}